<?xml version="1.0" encoding="UTF-8"?>
<chapter id="whatsnew">
  <title>What's new?!</title>

  <para>With this release Citrus introduces some new features and changes that will be part of the following sections. You
  will get a short overview and particularly get the impression what new stuff you can add to your testing with this release.</para>
  
  <section id="whatsnew-spring">
    <title>Spring version update</title>
    
    <para>We have some major version upgrades in our Spring dependencies. We are now using Spring 3.0.x, Spring Integration 2.0.x and SpringWS 2.0.x. This upgrade 
    was overdue for some time and is definitely worth it. With these upgrades we had to apply some changes in our API, too. This is because we are using the Spring classes a lot
    in our code. See the upgrade guide in this chapter for all significant changes that might affect your project.</para>
  </section>
  
  <section id="whatsnew-groovy">
    <title>New groovy features</title>

    <para>Citrus extended the possibilities to work with script languages like Groovy. You can use Groovy's MarkupBuilder to create 
    XML message payloads. Your Groovy code goes right into the test case or comes from external file. With MarkupBuilder you
    do not need to care about XML message syntax and overhead. Just focus on the pure message content. You can read the details in 
    <xref linkend="groovy-markupbuilder"/>.</para>
    
    <para>Further Groovy feature goes to the validation capabilities. Instead of working with XML DOM tree comparison and XPath expression validation you
    can use Groovy XMLSlurper. This is very useful for those of you who need to do complex message validation and do not like the XML/XPath syntax at all. With
    XMLSlurper you can access the XML DOM tree via named closure operations which feels great. This especially comes in handy for complex generic XML structures
    as you can search for elements, sort element list and use the powerful contains operation. This is all described in <xref linkend="groovy-xmlslurper"/>.</para>
    
    <para>Some other Groovy support extension comes in SQL result set validation (<xref linkend="actions-database-groovy"/>). When reading data from the database someone is able to validation the
    resulting data row set with Groovy script. The script code easily accesses the rows and columns with Groovy's out-of-the-box list and map handling. This
    adds very powerful validation to multi-row data sets from the database.</para>
  </section>
  
  <section id="whatsnew-sql">
    <title>SQL multi-line result set validation</title>
    
    <para>In this new Citrus version the tester can validate SQL Query results that have multiple rows. In the past Citrus could only handle a single row in the
    result set. Now this new release brings light into the dark. See also the new Groovy SQL result set validation which fits brilliant for complex multi-row 
    SQL result set validation. The details can be found in <xref linkend="actions-database-query"/></para>
  </section>
  
  <section id="whatsnew-message-types">
    <title>Extended message format support</title>
    
    <para>In previous versions Citrus was primary designed to handle XML message payloads. With this new release Citrus is also able to work with other message formats
    such as JSON, CSV, PLAINTEXT. This applies to sending messages as well as receiving and particularly validating message payloads. The tester can specify several message
    validators in Citrus for different message formats. According to the expected message format the proper validator is chosen to perform the message validation.</para>
    
    <para>We have implemented a JSON message validator capable of ignoring specific JSON entries and handling JSONArrays. We also provide a plain text message validator which
    is very basic to be honest. The framework is ready to receive new validator implementations so you can add custom validators for your specific needs.</para>
  </section>
  
  <section id="whatsnew-xml">
    <title>New XML features</title>
    
    <para>XML namespace handling is tedious expecially if you have to deal with a lot of XPath expressions in your tests. Before you had need to specify a namespace
    context for the XPath expression every time you use them in your test - now you can have a central namespace context which declares namespaces you use in your project.
    These namespaces identified by some prefix are available throughout the test project which is much more maintainable and easy to use. See how it works in 
    <xref linkend="xpath-namespace"/>.</para>
  </section>
  
  <section id="whatsnew-soap">
    <title>SOAP support improvements</title>
    
    <para>WsAddressing standard is now supported in Citrus (<xref linkend="soap-ws-adressing"/>). This means you can declare the specific WsAddressing message headers on message 
    sender level in order to send messages with WsAddressing feature. The header is constructed automatically for all SOAP messages that are sent over the message sender.</para>
    
    <para>Dynamic SOAP endpoint uri resolver enables you to dynamically address SOAP endpoints during a test. Sometimes a message sender may dynamically have to change the SOAP
    url for each call (e.g. address different request uri parts). With a endpoint uri resolver set on the message sender you can handle this requirement very easy. The tip for 
    dynamic endpoint resolving was added to <xref linkend="soap-sender"/></para>
    
    <para>We also simplified the synchronous SOAP HTTP communication within test cases. In previous versions you had to build complex parallel and sequential container constructs
    in order to continue with test execution while the SOAP message sender is waiting for the synchronous response to arrive. Now you can simply fork the message sending action and
    continue with further test actions while synchronous SOAP communication takes place. See the <xref linkend="soap-fork-mode"/> for details</para>
    
    <para>Some really small change introduced with this release is the fact that Citrus now logs SOAP messages in their pure nature. This means that you can see the complete SOAP 
    envelope of messages in the Citrus log files. This is more than helpful when searching for errors inside your test case.</para>
  </section>
  
  <section id="whatsnew-http">
    <title>Http and RESTful WebServices</title>
    
    <para>We have changed Http communication components for full support of RESTful WebServices on client and server side. The Http client now uses Spring's REST support for
    Http requests (GET, PUT, DELETE, POST, etc.). The server side has changed, too. The Http server now provides RESTful WebServices and is compliant to the existing SOAP Jetty server
    implementation in Citrus. If you want to upgrade existing projects to this version you may have to adjust the Spring application context configuration to some extent.</para>
    
    <para>For details have a look at the upgrade guide (<xref linkend="whatsnew-upgrading"/>) in this chapter or find detailed explanations to the new Http components in <xref linkend="http"/>.</para>
  </section>
  
  <section id="whatsnew-html-report">
    <title>HTML reporting</title>
    
    <para>Citrus provides HTML reports after each test run with detailed information on the failed tests. You can immediately see which tests failed in execution and where the test
    stopped. <xref linkend="reporting-html"/> provides details on this new feature.</para>
  </section>
  
  <section id="whatsnew-validation">
    <title>Validation matchers</title>
    
    <para>The new validation matchers will put the message validation mechanisms to a new level. With validation matchers you are able to execute powerful assertions on each message content element.
    For instance you can use the isNumber validation matcher for checking that a message value is of numeric nature. We added several matcher implementations that are ready for usage in your test but you can
    also write your custom validation matchers. Have a look at <xref linkend="validation-matchers"/> for details.</para>
  </section>
  
  <section id="whatsnew-conditional">
    <title>Conditional container</title>
    
    <para>The new conditional test action container enables you to execute test actions only in case a boolean expression evaluates to true. So the nested test actions inside the container may be not 
    executed at all in case a condition is not met. See <xref linkend="containers-conditional"/> for details.</para>
  </section>
  
  <section id="whatsnew-actions">
    <title>New test actions</title>
    
    <para>We introduced some completely new test actions in this release for you. The new actions are listed below:</para> 
    
    <itemizedlist>
        <listitem>Purge message channel action (<xref linkend="actions-purge-channels"/>)</listitem>
    </itemizedlist>
    
    <para>See <xref linkend="actions"/> for detailed instructions how to use the new actions.</para>
  </section>
  
  <section id="whatsnew-functions">
    <title>New functions</title>
    
    <para>We introduced some new default Citrus functions that will ease the testers life. This includes commonly used functions like encoding/decoding base64 bindary data, escaping XML and generating 
    random Java UUID values. These are the new functions in this release:</para>
    
    <itemizedlist>
        <listitem>citrus:randomUUID()</listitem>
        <listitem>citrus:cdataSection()</listitem>
        <listitem>citrus:encodeBase64()</listitem>
        <listitem>citrus:decodeBase64()</listitem>
        <listitem>citrus:digestAuthHeader()</listitem>
        <listitem>citrus:localHostAddress()</listitem>
    </itemizedlist>
    
    <para>See <xref linkend="functions"/> for detail descriptions of each function.</para>
  </section>
  
  <section id="whatsnew-bugfixes">
    <title>Bugfixes</title>
    
    <para>As usual we have some bugs fixed during the daily work. So we are proud that we have found some issues and resolved them to make the framework a little bit better. For detailed
    bugfix listings refer to the complete changes log.</para>
  </section>
  
  <section id="whatsnew-upgrading">
    <title>Upgrading from version 1.1</title>
    
    <para>If you are coming from Citrus 1.1 final you may have to look at the following points.</para>
    
    <itemizedlist mark="opencircle">
        <listitem>
            <para><emphasis>Spring version update</emphasis> We did some major version upgrades on our Spring dependencies. We are now using Spring 3.0.x, Spring Integration 2.0.x and SpringWS 2.0.x.
            These new major releases bring some code changes in our API which might take effect on your code, too. So be patient and update your code, it is definitely worth it!</para>
        </listitem>
        <listitem>
            <para><emphasis>Spring Integration headers:</emphasis> With 2.0.x version Spring Integration has removed the internal header prefix (&quot;springintegration_&quot;).
            So in some cases you might use those internal header names in your test cases in order to synchronize synchronous communication with internal message ids. Your test case 
            will fail as long as you use the old Spring internal header prefix in the test. Simply remove the header prefix wherever used and your test is up and running again.</para>
        </listitem>
        <listitem>
            <para><emphasis>Renamed packages and classes:</emphasis> We try to keep rename operations to a minimum, as we know that this may cause some adjustments in your code that directly uses the Citrus
            classes. But sometimes names do change in order to reach consistency and avoid cyclic dependencies. So with this release some classes have moved some were renamed. This mostly applies
            to the validation classes as we have changed the model here in order to enable validation of message formats other than pure XML.</para>
        </listitem>
        <listitem>
            <para><emphasis>Message validator:</emphasis> You need to specify at least one message validator in the citrus-context.xml. Before this was internally a static XML message validator, but now we offer
            different validators for several message formats like XML and JSON. Please see the Java API doc on MessageValidator interface for available implementations. If you just like to 
            keep it as it was before add this bean to the citrus-context.xml:</para>
            
            <programlisting>&lt;bean id=&quot;xmlMessageValidator&quot; class=&quot;com.consol.citrus.validation.xml.DomXmlMessageValidator&quot;/&gt;</programlisting>
        </listitem>
        <listitem>
            <para><emphasis>Test suite:</emphasis> We have eliminated/changed the Citrus test suite logic because it duplicates those test suites defined in TestNG or JUnit. In older versions the tester had to define a 
            Citrus test suite in Spring application context in order to execute test actions before/after the test run. Now these tasks before and after the test run are decoupled from a test suite.
            You define test suites exclusively in TestNG or JUnit. The test actions before/after the test run are seperately defined in citrus-context.xml so you have to change this configuration 
            in your Citrus project.</para>
            
            <para>For example where you had a Citrus test suite before</para>
            
            <programlisting>&lt;bean id="myTestSuite" class=&quot;com.consol.citrus.TestSuite&quot;&gt;
      &lt;property name=&quot;tasksBefore&quot;&gt;
          &lt;list&gt;
              &lt;bean id=&quot;initDatabase&quot; class=&quot;com.consol.citrus.actions.ExecuteSQLAction&quot;&gt;
                  &lt;property name=&quot;dataSource&quot; ref=&quot;testDataSource&quot;/&gt;
                  &lt;property name=&quot;statements&quot;&gt;
                      &lt;list&gt;
                          &lt;value&gt;CREATE TABLE PERSON (ID integer, NAME char(250), DESCRIPTION char(250))&lt;/value&gt;
                      &lt;/list&gt;
                  &lt;/property&gt;
              &lt;/bean&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
            
            <para>you can now just use this Spring bean explicitly to define a sequence of actions before the test suite:</para>
            
            <programlisting>&lt;bean class=&quot;com.consol.citrus.container.SequenceBeforeSuite&quot;&gt;
      &lt;property name=&quot;actions&quot;&gt;
          &lt;list&gt;
              &lt;bean id=&quot;initDatabase&quot; class=&quot;com.consol.citrus.actions.ExecuteSQLAction&quot;&gt;
                  &lt;property name=&quot;dataSource&quot; ref=&quot;testDataSource&quot;/&gt;
                  &lt;property name=&quot;statements&quot;&gt;
                      &lt;list&gt;
                          &lt;value&gt;CREATE TABLE PERSON (ID integer, NAME char(250), DESCRIPTION char(250))&lt;/value&gt;
                      &lt;/list&gt;
                  &lt;/property&gt;
              &lt;/bean&gt;
          &lt;/list&gt;
      &lt;/property&gt;
  &lt;/bean&gt;</programlisting>
            
            <para>See <xref linkend="testsuite"/> for details on this configuration changes.</para>
        </listitem>
        <listitem>
            <para><emphasis>Http server:</emphasis> If you are using the Citrus Http server implementation you need to update your Spring application context configuration. We improved the Http server side logic a lot in order to support
            full RESTful WebServices. In addition to that we wanted to have the configuration the same way as we do with SOAP Jetty server. Where you explicitly gave a message handler to the http-server configuration 
            component before like this:</para>
    
            <programlisting>&lt;citrus-http:server id=&quot;httpStandaloneServer&quot; 
                        port=&quot;8073&quot; 
                        uri=&quot;/test&quot; 
                        deamon=&quot;false&quot; 
                        message-handler=&quot;jmsForwardingMessageHandler&quot;
                        auto-start=&quot;true&quot;/&gt;
                        
    &lt;bean id=&quot;jmsForwardingMessageHandler&quot; class=&quot;com.consol.citrus.adapter.handler.JmsConnectingMessageHandler&quot;&gt;
        &lt;property name=&quot;destinationName&quot; value=&quot;JMS.Citrus.Http.Request.Forward&quot;/&gt;
        &lt;property name=&quot;replyDestinationName&quot; value=&quot;JMS.Citrus.Http.Request.Ack&quot;/&gt;
        &lt;property name=&quot;connectionFactory&quot;&gt;
            &lt;bean class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt;
                &lt;property name=&quot;brokerURL&quot; value=&quot;tcp://localhost:61616&quot; /&gt;
            &lt;/bean&gt;
        &lt;/property&gt;
        &lt;property name=&quot;fallbackMessageHandlerDelegate&quot;&gt;
            &lt;bean class=&quot;com.consol.citrus.adapter.handler.EmptyResponseProducingMessageHandler&quot;/&gt;
        &lt;/property&gt;
        &lt;property name=&quot;replyTimeout&quot; value=&quot;2000&quot;/&gt;
    &lt;/bean&gt;
            </programlisting>
            
            <para>You now give a Spring servlet context file where all server related configuration is done. In this context you define Spring MVC components and especially the HttpMessageController 
            which is able to handle REST Http requests (GET, PUT, DELETE, POST, etc.). This gives us more flexibility and more powerful REST server configurations with Spring MVC. Next example gives
            a complete http-server configuration with related http servlet context file content. If you are familiar with Citrus SOAP Jetty server you will see the affinity in those configurations.</para>
            
            <programlisting>&lt;citrus-http:server id=&quot;httpServer&quot; 
      port=&quot;8072&quot;
      auto-start=&quot;true&quot;
      context-config-location=&quot;classpath:com/consol/citrus/http/citrus-servlet-context.xml&quot;
      resource-base=&quot;src/citrus/resources&quot;/&gt;
            
  &lt;!-- REST controller for handling requests in citrus-servlet-context.xml --&gt;
  &lt;bean class=&quot;com.consol.citrus.http.controller.HttpMessageController&quot;&gt;
    &lt;property name=&quot;messageHandler&quot;&gt;
        &lt;bean id=&quot;jmsForwardingMessageHandler&quot; class=&quot;com.consol.citrus.adapter.handler.JmsConnectingMessageHandler&quot;&gt;
            &lt;property name=&quot;destinationName&quot; value=&quot;JMS.Citrus.Http.Request.Forward&quot;/&gt;
            &lt;property name=&quot;replyDestinationName&quot; value=&quot;JMS.Citrus.Http.Request.Ack&quot;/&gt;
            &lt;property name=&quot;connectionFactory&quot;&gt;
                &lt;bean class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt;
                    &lt;property name=&quot;brokerURL&quot; value=&quot;tcp://localhost:61616&quot; /&gt;
                &lt;/bean&gt;
            &lt;/property&gt;
            &lt;property name=&quot;fallbackMessageHandlerDelegate&quot;&gt;
                &lt;bean class=&quot;com.consol.citrus.adapter.handler.EmptyResponseProducingMessageHandler&quot;/&gt;
            &lt;/property&gt;
            &lt;property name=&quot;replyTimeout&quot; value=&quot;2000&quot;/&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
  &lt;/bean&gt;
            </programlisting>
        </listitem>
        <listitem>
            <para><emphasis>JUnit vs. TestNG:</emphasis> We support both famous unit testing frameworks JUnit and TestNG. With this release you are free to choose your prefered one. In this manner you need to add
            either a JUnit dependency or a TestNG dependency to your project on your own. We do not have static dependencies in our Maven POM to neither of those two. On our side these dependencies
            are declared optional so you feel free to add the one you like best to your Maven POM. Just add a JUnit or TestNG dependency to your Maven project or add the respective jar file to your 
            project if you use ANT instead.</para>
        </listitem>
    </itemizedlist>
  </section>
</chapter>